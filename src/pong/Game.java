/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pong;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 * Class of the game interface.
 * 
 * @author Yuri Miranda Fialho
 */
public class Game extends javax.swing.JFrame implements ActionListener, KeyListener {
    /**
     * Variáveis com dados de conexão.
     */
    int localPort = 0;
    int remotePort = 0;
    int player = 0;
    
    int gameWidth = 800;
    int gameHeight = 400;
    int xBall = this.gameWidth/2;
    int yBall = this.gameHeight/2;
    int xMovement = 3; 
    int yMovement = 3;
    String remoteIP = "";

    /**
     * Creates new form Game
     */
    public Game() {
        initComponents();
        getContentPane().setBackground(Color.BLACK);
        // Caixas de diálogo para capturar os dados.
        localPort = Integer.parseInt(JOptionPane.showInputDialog("Digite o número da sua porta:"));
        remoteIP = JOptionPane.showInputDialog("Digite o endereço IP do seu adversário:");
        remotePort = Integer.parseInt(JOptionPane.showInputDialog("Digite o número da porta do seu adversário:"));
        player = Integer.parseInt(JOptionPane.showInputDialog("Você quer ser o Player 1 ou Player 2? Digite o número."));
        
        Timer timer = new Timer(5, this);
        timer.start();
        
        Thread thread = new Thread() {
            @Override
            public void run() {
                beginServer();
            }
        };
        thread.start();
        addKeyListener(this);
    }

    /**
     * Função que inicializa as configurações de servidor para começar o jogo.
     * 
     * @author Yuri Miranda Fialho
     */
    public void beginServer() {
        try {
            ServerSocket server = new ServerSocket(localPort);
            
            while (true) {
                Socket s = server.accept();
                DataInputStream input = new DataInputStream(s.getInputStream());
                String yPosition = input.readUTF();
                DataOutputStream output = new DataOutputStream(s.getOutputStream());
                output.writeUTF("");
                switch (player) {
                    case 1:
                        PanelPlayer2.setLocation(PanelPlayer2.getX(), Integer.parseInt(yPosition));
                        break;
                    case 2:
                        PanelPlayer1.setLocation(PanelPlayer1.getX(), Integer.parseInt(yPosition));
                        break;
                    default:
                        break;
                }
                PanelBall.setLocation(PanelBall.getX(), PanelBall.getY());
            }
        } catch (Exception e) {}
    }
    
    /**
     * Função que move o jogador para cima.
     * 
     * @param value
     * @author Yuri Miranda Fialho
     */
    public void movingUp(int value) {
        try {
            Socket s = new Socket(remoteIP, remotePort);
            DataOutputStream output = new DataOutputStream(s.getOutputStream());
            output.writeUTF(value + "");
            DataInputStream input = new DataInputStream(s.getInputStream());
            String receiveMessage = input.readUTF();
            
        } catch (Exception e) {}
    }
    
    /**
     * Função que move o jogador para baixo.
     * 
     * @param value
     * @author Yuri Miranda Fialho
     */
    public void movingDown(int value) {
        try {
            Socket s = new Socket(remoteIP, remotePort);
            DataOutputStream output = new DataOutputStream(s.getOutputStream());
            output.writeUTF(value + "");
            DataInputStream input = new DataInputStream(s.getInputStream());
            String receiveMessage = input.readUTF();
            
        } catch (Exception e) {}
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelPlayer1 = new javax.swing.JPanel();
        PanelPlayer2 = new javax.swing.JPanel();
        PanelBall = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pong");
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(java.awt.Color.black);
        setMaximumSize(new java.awt.Dimension(800, 400));
        setName("FrmGame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(800, 400));

        PanelPlayer1.setBackground(new java.awt.Color(255, 255, 255));
        PanelPlayer1.setForeground(new java.awt.Color(255, 255, 255));
        PanelPlayer1.setName("PanelPlayer1"); // NOI18N

        javax.swing.GroupLayout PanelPlayer1Layout = new javax.swing.GroupLayout(PanelPlayer1);
        PanelPlayer1.setLayout(PanelPlayer1Layout);
        PanelPlayer1Layout.setHorizontalGroup(
            PanelPlayer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        PanelPlayer1Layout.setVerticalGroup(
            PanelPlayer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        PanelPlayer2.setBackground(new java.awt.Color(255, 255, 255));
        PanelPlayer2.setForeground(new java.awt.Color(255, 255, 255));
        PanelPlayer2.setName("PanelPlayer2"); // NOI18N

        javax.swing.GroupLayout PanelPlayer2Layout = new javax.swing.GroupLayout(PanelPlayer2);
        PanelPlayer2.setLayout(PanelPlayer2Layout);
        PanelPlayer2Layout.setHorizontalGroup(
            PanelPlayer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        PanelPlayer2Layout.setVerticalGroup(
            PanelPlayer2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        PanelBall.setBackground(new java.awt.Color(255, 255, 255));
        PanelBall.setForeground(new java.awt.Color(255, 255, 255));
        PanelBall.setName("PanelBall"); // NOI18N
        PanelBall.setPreferredSize(new java.awt.Dimension(15, 15));

        javax.swing.GroupLayout PanelBallLayout = new javax.swing.GroupLayout(PanelBall);
        PanelBall.setLayout(PanelBallLayout);
        PanelBallLayout.setHorizontalGroup(
            PanelBallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );
        PanelBallLayout.setVerticalGroup(
            PanelBallLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 381, Short.MAX_VALUE)
                .addComponent(PanelBall, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(372, 372, 372)
                .addComponent(PanelPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(PanelPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PanelPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(PanelBall, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(160, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

   
    @Override
    public void keyReleased(KeyEvent e) {
        //
    }
    
    @Override
    public void keyPressed(KeyEvent e) {
        switch (player) {
            case 1: {
                if (e.getKeyCode() == KeyEvent.VK_UP && PanelPlayer1.getY() != 0) {
                    //Alterar a posição na minha tela e enviar a posição para ser alterada na tela do adversário.

                    //Alterar na minha tela.
                    PanelPlayer1.setLocation(PanelPlayer1.getX(), PanelPlayer1.getY() - 5);
                    System.out.println();
                    //Enviar a posição ao adversário.
                    movingUp(PanelPlayer1.getY() - 5);
                } else if (e.getKeyCode() == KeyEvent.VK_DOWN && PanelPlayer1.getY() != 295) {
                    //Alterar na minha tela.
                    PanelPlayer1.setLocation(PanelPlayer1.getX(), PanelPlayer1.getY() + 5);
                    //Enviar a posição ao adversário.
                    movingDown(PanelPlayer1.getY() + 5);
                }
            }
            case 2: {
                if (e.getKeyCode() == KeyEvent.VK_UP && PanelPlayer2.getY() != 0) {
                    //Alterar a posição na minha tela e enviar a posição para ser alterada na tela do adversário.

                    //Alterar na minha tela.
                    PanelPlayer2.setLocation(PanelPlayer2.getX(), PanelPlayer2.getY() - 5);
                    System.out.println();
                    //Enviar a posição ao adversário.
                    movingUp(PanelPlayer2.getY() - 5);
                } else if (e.getKeyCode() == KeyEvent.VK_DOWN && PanelPlayer2.getY() != 295) {
                    //Alterar na minha tela.
                    PanelPlayer2.setLocation(PanelPlayer2.getX(), PanelPlayer2.getY() + 5);
                    //Enviar a posição ao adversário.
                    movingDown(PanelPlayer2.getY() + 5);
                }
            }
            default:
                break;
        }
    }
    
    @Override
    public void repaint() {
        super.repaint();
    }
    
    @Override
    public void keyTyped(KeyEvent e) {}
    
    @Override
    public void actionPerformed(ActionEvent e) {
        update();
        repaint();
    }
    
    private void update() {
        this.xBall += this.xMovement;
        this.yBall += this.yMovement;
        
        PanelBall.setLocation(this.xBall, this.yBall);
        if (PanelBall.getX() < 0) {
            JOptionPane.showMessageDialog(this, "Player 2 venceu!");
            PanelBall.setLocation(this.gameWidth/2, this.gameHeight/2);
            this.xMovement = -this.xMovement;
        } else if (PanelBall.getX() > this.gameWidth) {
            JOptionPane.showMessageDialog(this, "Player 1 venceu!");
            PanelBall.setLocation(this.gameWidth/2, this.gameHeight/2);
            this.xMovement = -this.xMovement;
        } else if (PanelBall.getY() < 0 || PanelBall.getY() > this.gameHeight) {
            this.yMovement = -this.yMovement;
        }
        checkCollision();
    }
    
    public void checkCollision() {       
        if (PanelPlayer1.getBounds().intersects(PanelBall.getBounds()) || PanelPlayer2.getBounds().intersects(PanelBall.getBounds())) {
            this.xMovement = -this.xMovement;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelBall;
    private javax.swing.JPanel PanelPlayer1;
    private javax.swing.JPanel PanelPlayer2;
    // End of variables declaration//GEN-END:variables
}
